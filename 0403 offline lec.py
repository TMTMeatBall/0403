# 그래프의 두가지 표현 방식 - (인접행렬/인접리스트)
# 에 대한 DFS/BFS
# 서로소 집합
# 최소비용 신장트리
# 최단 경로

# 그래프 - 정점/간선 들의 집합
#   N:M과 같은 다대다 관계를 갖는 원소들의 관계를 표현함 (트리의 경우 1대1 또는 1대n정도의 관계)
# 유형 - 방향성 여부[무향/유향], 가중치(간선가중치), 사이클 없는 그래프(루프가 없고, 트리가 대표적인 형태)

# 그래프 경로 - 간선을 나열한 것
# 한 정점을 최대 한번만 지나는 단순경로 / 시작한 정점에서 끝나는 경로인 사이클

# 인접 행렬
# n * n 정방형 행렬, 두 정점이 인접한 경우 1, 그렇지 않은 경우 0으로 표현
# 무향 그래프의 인접 행렬 - 각 정점을 기준으로 행렬이 대칭
# 유향 그래프 정점기준 행의 합은 진출/ 열의 합은 진입하는 인접여부 파악 가능
# 인접노드 파악이 어려움

# 인접 리스트
# 무향 - 노드수 = 간선의 수 *2
# 유향 - 노드수 = 간선수

# DFS
# visited, dfs,
# 시작정점을 잡고, stack.append(startnode)
# if not visited(node): #방문한 적 없다면,
#  visited[0] = True

# BFS
#

# 서로소 집합 - 공통 원소가 없는 두 집합(교집합이 없음)
# 각 집합에 속한 대표자 원소를 통해 표현함
# 표현 (make-set(x),find-set(x),union(x,y))
# make-set(x)집합에 대해 요소 각각을 집합(초기화) 유일 멤버x를 포함하는 새로운 집합을 생성하는 연산
# 인덱스 0번을 제외하고, 자기 자신의 인덱스에 자신을 집어넣는다
#  find-set(x) (대표자가 누구인지 찾는 연산) 재귀로 찾는다 + 이전의 대표자를 향하는 원소에 대해서 대표자를 정정해주는 기능
#
#  union(x,y) 병합하고, 대표자 원소를 표시함 (모두가 대표자 원소를 향해야 함)
# 대표자 끼리의 union(x,a)는 모두 합쳐지게 된다.
# 상호 배타 집합에서 트리의 경우, 루트노드가 대표자가 된다.

#makeset(1~6) 각 스스로를 대표자로 하는 집합 6개가 만들어진다
# union(1,3) - 1,3 을 합친 집합이 생김. + findset을 통해 스스로를 루트노드로 갖다가 루트노드가 바뀜
# find-set은 경로압축을 위해 루트노드로 부모노드를 가질 수 있도록 구조를 바꿔줌
# 경로 압축

# rank 를 사용하는 것으로 대표자 선출에 있어 로직 생성. 또는 문제에 주어진 조건으로 대표자 선출에
# 로직을 생성

# find_set연산 - 경로압축, 루트노드 찾기 등 여러 기능을 갖는다
